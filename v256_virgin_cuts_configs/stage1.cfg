
## ===================================================
## Configuration File - Fri May  4 13:43:30 2018
## ===================================================


# This is the algorithm used to read in VERITAS pointing 
# monitor data. The default is "DATABASE", which means stage 
# 1 loads in uncalibrated pointings and calibration data 
# from the database. Use -Stage1_DBNameOffline to select the 
# offline database name. Alternatively you can use 
# "FROMFILE" to read in the data from text files and 
# "nullptr" if you want to disable this. 
VPM_Algorithm "DATABASE"

# Set the array info data source. Valid options are 
# "BestAvailable", "DatabaseOnly" and "CompiledOnly" 
AIF_DataSource "BestAvailable"

# Return an ArrayInfo valid for the given time, rather than 
# the time requested by the program. Argument should have 
# the format "YYYY-MM-DD" "YYYY-MM-DD HH:MM:SS" or 
# "YYYY-MM-DD HH:MM:SS.NNNNNNNNN" 
AIF_OverrideTime ""

# Force the array info factory to return a particular 
# pre-compiled array configuration. Valid choices are: (1) 
# "WC109": Whipple 10m 109 pixel camera. (2) "WC151": 
# Whipple 10m 151 pixel camera. (3) "WC331": Whipple 10m 331 
# pixel camera. (4) "WC490": Whipple 10m 490 pixel camera. 
# (5) "VC499_KPNO": VERITAS-4 499 pixel camera with KPNO 
# (Mercedes) positions. (6) "VC499_BASE": VERITAS-4 499 
# pixel camera with basecamp telescope positions. 
AIFC_OverrideArray ""

# Set the rotation angles for each of the cameras. Syntax is 
# telId/value, so 1/0,2/0,3/0,4/0 sets all angles to zero. A 
# telId of zero means all cameras will be rotated the same 
# amount. 
AIFC_CameraRotation 1/0.91,2/1.61,3/0.26,4/2.94

# Multiply the pixel location in each camera by this 
# amount.Syntax by example is 1/0.8, 2/1.1, 3/2.2, 4/1will 
# multiply the x and y PMT locations for T1 by 0.8, for T2by 
# 1.1, for T3 by 2.2 and for T4 by 1 
AIFC_Mod_Camera 1/0.9774,2/0.9774,3/0.9774,4/0.9774

# Controls which set of calibration parameters to use when 
# loading pointing monitor data. Default is 0 which means 
# latest version available. 
VPMDB_CalibParamVersion 0

# Defines the filename to read in calibration parameters 
# from when VPM_Algorithm=FROMFILE 
VPMFF_CalibParameterFile ""

# Controls which set of camera parameters to use when 
# loading pointing monitor data. Default is 0 which means 
# latest version available. 
VPMDB_CamParamVersion 0

# Defines the filename to read in camera parameters from 
# when VPM_Algorithm=FROMFILE 
VPMFF_CameraParameterFile ""

# Algorithm to determine whether an FADC crate stop jitter 
# has occurred - currently CrateTimingCorrectorSimple, 
# CrateTimingCorrectorFloatingRef, 
# CrateTimingCorrectorFlasher and CrateTimingCorrectorNULL 
# are available. Use NULL if you believe that there is a 
# problem with the L2 pulses. If using 
# CrateTimingCorrectorFlasher with a trivial gains file, 
# name it "simLaser.root" so the algorithm knows not to look 
# for anything in the calibration file. 
CTCF_Algorithm "CrateTimingCorrectorFlasher"

# Cut-off used to determine whether an FADC crate jitter has 
# occurred 
CTCS_CutOff 1.5

# Use this option to adjust the number of events to use when 
# getting the mean pulse. The full run is not used as this 
# would significantly extend the analysis time. 
DAAT_NumEvents 10000

# Use this option to adjust the number of events to use when 
# getting the mean pulse. The full run is not used as this 
# would significantly extend the analysis time. 
DAT_NumEvents 10000

# Use this option to adjust the number of events to use when 
# constructing the average L2 pulse 
DCL2P_NumEvents 10000

# Select the comma-separated list of algorithms to be used. 
# Available classes include DiagnosticsCheckL2Pulse, 
# DiagnosticsCalculateLowGainPedestals, 
# DiagnosticsEvaluateL1ThresholdPulse, 
# DiagnosticsCheckANLL2Pulse, DiagnosticsCheckClocks, 
# DiagnosticsFlagCount, DiagnosticsAverageTraces, 
# DiagnosticsRate, DiagnosticsAverageAllTraces 
D_Algorithm DiagnosticsQC,DiagnosticsCheckL2Pulse,DiagnosticsFlagCount,DiagnosticsAverageTraces,DiagnosticsRate,DiagnosticsAverageAllTraces

# Change the output pdf file (can use slashes - but 
# directory must exist) 
D_PDF "runNumber_diag.stageNumber.pdf"

# The is the seed for the random number generator (RNG). The 
# default seed is "0", which means that RNG are initialized 
# with random seeds (based on CPU time...). 
G_GlobalRandomSeed 0

# This is the global debug level. Possible values are 
# "E_NODEBUG", "E_INFO", "E_FULLDEBUG". The default value is 
# "E_NODEBUG", i.e. unless the user specify a higher debug 
# level for specific classes, there will be no debug 
# information produced. 
G_GlobalDebugLevel "E_NODEBUG"

# This is the global debug stream. The default value is 
# "std::cout". Any other value is interpreted as a filename, 
# and the debug information will be streamed to that file. 
G_GlobalDebugStream "std::cout"

# This is a list of classes with specific debug levels and 
# streams. If you want a class called "VASomeThing" to have 
# a debug level of "E_INFO" and stream the output to a file 
# named "myclassdebug.txt", the option should be 
# "VASomeThing/E_INFO/myclassdebug.txt". 
G_DebugOptions 

# False (or 0) for real data. True (or 1) for simulation. 
G_SimulationMode 0

# False (or 0) if we are to try patching events affected by 
# overflow. Default to True (or 1). 
G_DiscardOverflow 1

# Frequency at which information is printed for events. The 
# default value is set to 1000, i.e.,information is printed 
# every 1000 events. A value of 0 should be interpreted as 
# NO PRINTOUT. Any other non-negative value (XXXX) is 
# interpreted as: print every XXXX events. 
G_GlobalProgressPrintFrequency 10000

# Number of events to analyse. Default value is 0, which 
# means all events will be processed. Any other positive 
# integer is interpreted as an upper limit on the number of 
# events to be processed. 
G_NumEventsToAnalyse 0

# Start analysing at this event, skip all previous 
G_EventToStartFrom 0

# comma separated list of pointing offsets [degrees] in 
# camera X-plane. 1==T1, 2==T2, 3==T3, 4==T4. For example, 
# to put an arbitrary 0.05 degree mispointing on T1 and a 
# 0.1 degree mispointing on T2 do: 
# -G_PointingOffsetX=1/0.05,2/0.1 
G_PointingOffsetX 

# comma separated list of pointing offsets [degrees] in 
# camera X-plane. 1==T1, 2==T2, 3==T3, 4==T4. For example, 
# to put an arbitrary 0.1 degree mispointing on T1 and a 
# 0.05 degree mispointing on T2 do: 
# -G_PointingOffsetY=1/0.1,2/0.05 
G_PointingOffsetY 

# Use this option to set a GPS clock to be bad. For the 
# Telescope GPS clocks, the format is 1==T1, 2==T2, 3==T3, 
# 4==T4. Thus to set the GPS clocks for T1 and T3 do 
# -G_BadGPSClocks=1/true, 3/true. You can also set the L3 
# array trigger GPS clock to be bad. In this case, we the 
# index 0 to represet L3. Thus to set the L3, T1 and T3 GPS 
# clocks to be bad, do -G_BadGPSClocks=0/true, 1/true, 
# 3/true. The order is not important. Generally if you are 
# using this option in Stage1, you will need to use it in 
# stage 2 also. These settings will be saved to the run 
# header. 
G_BadGPSClocks 

# You can specify a source name here, e.g. Crab. If there 
# are no source co-ordinates in the run header, maybe 
# because the database was not contacted in stage 1, or you 
# are using simulations, then this can be used in 
# conjunction with VASourceList to get the source 
# co-ordinates for later stage analysis 
G_SourceName "undefined"

# This is the default interpolator that calculates the 
# pointing position (RA, Dec, Az, El) of the the telescopes. 
# The default interpolator is "LINEAR", which means that a 
# simple linear interpolation is used to calculate the 
# pointing position. This is what should be used if tracking 
# information is available from the database for this run. 
# Other options are "UseRADec", which should be used with 
# option flags "G_TrackingSourceRA" and 
# "G_TrackingSourceDec", and FILLFROMVBF and "nullptr". 
G_TrackingInterpolator "LINEAR"

# Select a comma-separated list of algorithms to be used for 
# calculating the deadtime. Available classes are 
# LiveTimeCalcVBFL3Scalar, LiveTimeCalcFromDeltaT, 
# LiveTimeCalcFromDB(this one not yet available) All classes 
# are currently developmental, please do not change the 
# default 
LTC_Algorithm LiveTimeCalcVBFL3Scalar,LiveTimeCalcFromDeltaT

# Select the algorithm you want to use for loading the low 
# gain data. The default is to use the LowGainDataLoadAuto 
# function which automatically finds the best data. 
# Alternatively you can specify your own file with 
# -LGDL_Algorithm=LowGainDataLoaderFromFile and 
# -LGDLFF_FileName=<string>. If you do not want to use a low 
# gain datafile, you can use LowGainDataLoaderNull (this 
# happens automatically for simulations) 
LGDL_Algorithm "LowGainDataLoaderAuto"

# Set the default value for the low gain ratio (default = 
# 6). This value is used when real values could not be 
# loaded from a file (if using LowGainDataLoaderFromFile). 
# The value set here is now also applied to all channels in 
# simulation mode! 
LGDL_LoGainRatio 6

# Set the default value for the low gain ratio for the time 
# period after the PMT upgrade (default = 5.8). 
LGDL_LoGainRatioPostUpgrade 5.8

# Set the default value for the low gain ratio for the time 
# period before the PMT upgrade (default = 6.0). 
LGDL_LoGainRatioPreUpgrade 6

# Select the file from which to load the low gain data. 
# Should be used in conjunction with 
# -LGDL_Algorithm=LowGainDataLoaderFromFile 
LGDLFF_FileName ""

# This option is used when the user wants to replace the 
# tracking parameters for specific telescopes. For example, 
# we know that the tracking parameters used for T3 during 
# the December 2006 dark run were not correct, but we know 
# what they should have been and therefore we can correct 
# them. Here is an example on how to use this option if 
# correcting the tracking parameters for T1 and T3: 
# -G_ReplaceTrackingParameters T1/file1.txt,T3/file3.txt 
G_ReplaceTrackingParameters 

# PSDF_Algorithm key and its value given specifies the 
# source from which the PixelStatusData is filled. The 
# available algorithms are "VDB" and "Trivially" 
PSDF_Algorithm "VDB"

# Defines the filename to read in uncalibrated pointings 
# from when VPM_Algorithm=FILE 
VPMFF_PointingFile ""

# QSCF_Algorithm key and its value given specifies the 
# algorithm of the QStatsCalculator that this factory will 
# produce. Available value is "QStatsCalcTimeDep" 
QSCF_Algorithm "QStatsCalcTimeDep"

# "QSCTD_CalcPeriod" parameter specifies the width of the 
# successive time windows in the run. Its unit is 
# seconds.The charge statistics are calculated independently 
# for each of those time windows. 
QSCTD_CalcPeriod 180

# "QSCTD_MinSumWinWidth" is the minimum width of the trace 
# integration window that charge is integrated. Its unit is 
# number of samples. Available values are from 1 to the 
# value of maximum number of samples. 
QSCTD_MinSumWinWidth 2

# "QSCTD_MaxSumWinWidth" is the maximum width of the trace 
# integration window that charge is integrated. Its unit is 
# number of samples. Available values are from 1 to the 
# value of maximum number of samples. Set this parameter to 
# zero to calculate pedvars up to the readout window size 
# minus one. 
QSCTD_MaxSumWinWidth 0

# "QSCTD_UseMultipleSteps" parameter specifies whether or 
# not to loop multiple times of a single FADC trace. Select 
# true or false, default is true. 
QSCTD_UseMultipleSteps 1

# "QSCTD_OnlyAnalysePedEventss" parameter specifies whether 
# or not to only analyse events where the array trigger 
# indicates. it is a pedestal eventSelect true or false, 
# default is true. 
QSCTD_OnlyAnalysePedEvents 1

# "QSCTD_OnlyAnalyseLowGainChans" parameter specifies 
# whether or not to only analyse low gain channels. Used in 
# the investigationof low gain pedestalsSelect true or 
# false, default is false. 
QSCTD_OnlyAnalyseLowGainChans 0

# "QSCTD_WinStartOverride" parameter specifies whether the 
# start location for the pedestal integration. Please use an 
# integer greater than zero (default = 1). Setting it to -1 
# activates the random integration start. 
QSCTD_WinStartOverride 1

# "RGCS_SumStartSample" key specifies the start sample of 
# the integration window on the FADC trace. This integration 
# window is used to calculate the charge for that channel. 
# Its unit is in number of samples. The available values are 
# from 0 to the value of maximum number of samples. 
RGCS_SumStartSample 0

# "RGCS_SumWindowWidth" key specifies the width of the 
# integration window on the FADC trace in number of samples 
# units. This integration window is used to calculate the 
# charge for that channel. The available values are from 1 
# to the value of maximum number of samples. The default of 
# 0 causes the full trace to be used automatically. 
RGCS_SumWindowWidth 0

# "RGCS_FlasherChargeMin" key specifies the minimum charge 
# required for the event to be recognised as a Flasher 
# eventfor the relative gain calculation. See also 
# TOCS_FlasherChargeMin 
RGCS_FlasherChargeMin -50

# "RGCS_DefaultHVSetting" key specifies whether a run has 
# nominal HV (0),or low HV setting < 80% of nominal (1) 
RGCS_DefaultHVSetting 0

# "RGCS_LaserChargeMin" key specifies the minimum charge 
# required for the event to be recognised as a Laser 
# eventfor the relative gain calculation. See also 
# TOCS_LaserChargeMin 
RGCS_LaserChargeMin 250000

# "RGCF_GetRunModeFromRunHeader" determines whether the 
# algorithm of the Relative Gain Calculator will be 
# determined from the Run Header (true; default) instead of 
# user-specified RGCF_Algorithm (false). 
RGCF_GetRunModeFromRunHeader 1

# "RGCF_Algorithm" key specifies the algorithm of the 
# Relative Gain Calculator that this factory will produce. 
# Ignored unless RGCF_GetRunModeFromRunHeader set to false. 
# The available values are "RelGainCalcSimple", 
# "RelGainCalcFlasher" and "RelGainCalcHiLo". 
RGCF_Algorithm "RelGainCalcFlasher"

# Set observing mode to be one of On, Off, Wobble 
RHM_ObservingMode "undefined"

# If observing mode is off or wobble you can set the offset 
# in RA here in <units, value>, where units are 
# minutes/degrees/radians, e.g. 
# -fTrackingOffsetRA=minutes/-30 
RHM_TrackingOffsetRA 

# If observing mode is off or wobble you can set the offset 
# in Dec here in <units, value>, where units are 
# degrees/radians, e.g. -fTrackingOffsetRA=degrees/0.3 
RHM_TrackingOffsetDec 

# Set a source offset in camera co-ordinates. First element 
# is the offset distance, second element is the offset angle 
# with North corresponding to 0 degrees, East as 90 degrees, 
# South as 180 degrees and West as 270 degrees. Examples a 
# 0.3 degree wobble offset North is 
# -RHM_CameraOffsetDeg=0.3/0; a 0.4 degree wobble offset 
# South is 0.4/180; a 0.5 degree wobble offset East is 
# 0.5/90; or a 0.7 degree wobble offset is 0.7/270 
RHM_CameraOffsetDeg 

# Override the nominal live time - can be used if the live 
# time calculator fails. Ignore the default value. 
RHM_NominalLiveTime -10

# Override the cut live time - can be used if the live time 
# calculator fails. Ignore the default value. 
RHM_CutLiveTime -10

# Override the run info offset distance [degrees] 
RHM_RunInfoOffsetDistance -1

# This option is used only when option "UseRADec" is 
# invoked. This is the Dec of the source, e.g. for the Crab 
# 22d00m52s ONLY USE J2000 COORDINATES!!!! 
G_TrackingSourceDec "0d0m0s"

# This option is used only when option "UseRADec" is 
# invoked. This is the RA of the source, e.g. for the Crab 
# 05h34m31.9s ONLY USE J2000 COORDINATES!!!! 
G_TrackingSourceRA "0h0m0s"

# This is Run Mode of the Stage 1 program. Available modes 
# are "data" and "laser" and "simlaser" and "flasher" and 
# "highlow" . 
Stage1_RunMode "flasher"

# This option denotes whether Stage 1 should connect to DB 
# or use fallback values for quantities stored in 
# DB.Available options are "yes" or "no" 
Stage1_UseDB "yes"

# This is the name of the Database to which the Stage 1 
# program connects. 
Stage1_DBName "VERITAS"

# This is the name of the offline Database to which the 
# Stage 1 program connects. 
Stage1_DBNameOffline "VOFFLINE"

# This is the host name of the Database to which the Stage1 
# program connects. 
Stage1_DBHost "romulus.ucsc.edu"

# This is the user name with which the Stage 1 program 
# connects to DB. 
Stage1_DBUser "readonly"
Stage1_DBPasswd ""                    # This is the password for the DB user.

# This is the port to be used for the DB (default is std 
# SQL) 
Stage1_DBPort 0

# This is where TraceNoiseReal gets its DataFile 
Stage1_TraceNoiseFile ""

# Select false to disable calculation of the average FADC 
# trace arrival time for data runs 
Stage1_CalcTZero 1
Stage1_QADC 0                         # Select true when analyzing a QADC run

# Select true when analyzing a charge injection run. This 
# will disable the tracking and FIR algorithms. 
Stage1_QI 0

# This option denotes whether inner channels have raised HV 
# or not during high-low gain calibration.Available options 
# are 1 or 0. Default is 1. 
Stage1_InnerHigh 1

# "TOCF_Algorithm" key specifies the algorithm of the 
# TOffsetCalculator that this factory will produce. The 
# available value is "TOffsetCalcSimple". 
TOCF_Algorithm "TOffsetCalcSimple"

# TOCS_TraceStartSample key specifies the start sample of 
# the trace window that the T_Zero will be searched. The 
# available values are from 0 to the value of maximum number 
# of samples. 
TOCS_TraceStartSample 0

# TOCS_TraceStartSample key specifies the width of the trace 
# window that the T_Zero will be searched. The available 
# values are from 1 to the value of maximum number of 
# samples. The default of 0 causes the full trace to be used 
# automatically. 
TOCS_TraceWindowWidth 0

# TOCS_LaserChargeMin key specifies the minimum charge 
# required for the event to be recognised as a laser 
# eventfor the toffset calculation. See 
# also-RGCS_LaserChargeMin 
TOCS_LaserChargeMin 250000

# Select the TZeroCalc Algorithm. This value is used by 
# stages 1 and 2 to help determine the ideal location of the 
# FADC window. Select TZeroCalcNull to turn it off 
TZ_Algorithm "TZeroCalcSimple"

# This is where VATZeroCalc gets the number of events a 
# channel musthave in order to contribute to the threshold 
TZS_MinEventsPerChan 100

# This is where VATZeroCalc gets the number of channels that 
# must haveat least TZS_MinEventsPerChan events so that 
# enough statistics are accumulatedfor each telescope 
TZS_MinNumChansOverThresh 100

# This is where VATZeroCalc gets the minimum charge that a 
# channel must have in order to be used for the TZero 
# histogram 
TZS_MinCharge 70

# This is where VATZeroCalc gets the max number of events to 
# use when getting L2 arrival times (only important if using 
# flasher crate timing corrector 
TZS_MaxEventsToProcessForL2 10000

# Choose an algorithm for filling the Telescope Relative 
# Gain. Options are TelRelGainFillerNull, 
# TelRelGainFillerConfig, TelRelGainFillerDB. Currently only 
# TelRelGainFillerNull and TelRelGainFillerConfig are 
# available 
TRGF_Algorithm "TelRelGainFillerNull"

# comma separated list of relative inter telescope 
# calibration constants.1==T1, 2==T2, 3==T3, 4==T4. For 
# example, to adjust the gain of T1 by 1.2 and T2 by 0.6 do 
# -TRGF_InterTelescopeCalibration=1/1.2,2/0.6. Note that 
# this calibration is applied <last>, with the charge 
# <divided> by the calibration constant provided. Note also 
# that you <must> also specify 
# -TRGF_Algorithm=TelRelGainFillerConfig 
TRGF_InterTelescopeCalibration 

# Simple window is default. Under development are 
# TraceEvaluatorDynamicWindow, TraceEvaluatorTraceFit1, 
# TraceEvaluatorLinearInterpolation, 
# TraceEvaluatorMatchedFilter, 
# TraceEvaluatorDynamicWindowStartTime (this one should work 
# fine) 
TE_Algorithm "TraceEvaluatorSimpleWindow"

# Fraction of pulse height defining start of rise time 
# calculation [0-1] 
TE_RiseTimeBottom 0.1

# Fraction of pulse height defining end of rise time 
# calculation [0-1] 
TE_RiseTimeTop 0.9

# Fraction of pulse height defining end of fall time 
# calculation [0-1] 
TE_FallTimeBottom 0.1

# Fraction of pulse height defining start of fall time 
# calculation [0-1] 
TE_FallTimeTop 0.9

# Fraction of pulse height defining start of width 
# calculation [0-1] 
TE_WidthRising 0.5

# Fraction of pulse height defining end of width calculation 
# [0-1] 
TE_WidthFalling 0.5

# Integrate low gain traces to end of readout window (only 
# use with TraceEvaluatorDynamicWindowStartTime) 
TE_IntegrateFullLowGain 0

# User-specified cutoff for readout window (useful when only 
# interested in the first ~20 samples of a highlow run with 
# an expanded readout window). Default of 0 will use full 
# readout window. 
TE_WindowCutOff 0

# Select true to apply the charge ratios to the matched 
# filter. If charge ratios are being calculated, set this to 
# false 
TEMF_ApplyChargeRatio 1

# Pass in the data file for the matched filter 
TEMF_DataFile ""

# This is currently the only trace manager algorithm 
# available. Leave alone! 
TMan_Algorithm "TraceManagerSimple"

# Comma-separated list of TraceModifiers. 
# TraceModifierReSample, TraceModifierDeconvolution, 
# TraceModifierNull. Note that TraceModifierReSample 
# requires compilation with GSL - add -D_OAWG_GSL to the 
# compile flags in Makefile.common. You also need to add the 
# $(GSLLIB) to the line LIBS = ... 
TMod_TraceModifierList 

# Use this trace modifier - only default null case 
# available, leave alone 
TMod_Algorithm "TraceModifierNull"

# Fraction of zero padding to apply. The trace will be 
# resampled by this factor (eg if there is 24 samples, then 
# the trace will be resampled to a resolution of 
# ZeroPadFactor * 24 (uint32_t) 
TMRS_ZeroPaddingFactor 8

# Select trace noise algorithm. Currently only the null case 
# and real noise are available. The real noise feature is 
# under development (it is for use with sims). Leave alone 
TN_Algorithm "TraceNoiseNull"

# Put required BadChannelIdentifier algorithm here. Options 
# are -VABCI_Algorithm=BadChannelIdentifierNull, 
# -VABCI_Algorithm=BadChannelIdentifierDefault and 
# -VABCI_Algorithm=BadChannelIdentifierPixelStatusOverride. 
BCI_Algorithm "BadChannelIdentifierDefault"

# Put minimum allowable relative gain here 
BCI_GainMin 0.6

# Put maximum allowable relative gain here 
BCI_GainMax 1.5

# Put minimum allowable relative gain variance here 
BCI_GainVarMin 0.05

# Put maximum allowable relative gain variance here 
BCI_GainVarMax 0.4

# Put maximum allowable value of the difference between a 
# given channel's pedvar and the average pedvar in units of 
# the standard deviation of all the pedvars here 
BCI_PedVarMaxSTDEV 4

# Put minimum allowable value of the difference between a 
# given channel's pedvar and the average pedvar in units of 
# the standard deviation of all the pedvars here 
BCI_PedVarMinSTDEV -2.5

# Value of summation window to use to compute pedestal 
# variance to determine whether the channel is bad. Should 
# be [2-10] unless the default window range in stage 1 has 
# been overridden 
BCI_TraceVarWindow 5

# If you want to set or add bad channels from a user 
# specified list then pass in the filename with the list 
# using this command. The file format is two columns - the 
# first column is the telescope number (starting from one) 
# and the second column is the channel number (starting from 
# zero). 
BCI_BadChannelList ""

# If you want to use the pixel status data from another 
# file, use this option. This is useful if you are doing 
# simulations and you want to model the pixel status of the 
# array after a particular run (ie the same channels will be 
# switched off). This option must be used with 
# -BCI_Algorithm=BadChannelIdentifierPixelStatusOverride 
BCIPSO_PixelStatusDataFile ""

# Select an algorithm that decides how to specify an event 
# time. Method available are LoopClocks (default) and 
# ComparingClocks. 
VAGetTime_Algorithm "ComparingClocks"

# Select an algorithm that decides how to deal with 
# VEventOverflow data Method available are none and default 
# (default) which do nothing. 
VEventOverflow_Algorithm "default"

# Run header filling method: methods are 
# VARunHeaderFillerNull for an empty run header; 
# VARunHeaderFillerDB to fill the header from the 
# database;VARunHeaderFillerVBF to fill the run header from 
# the data file only; VASimulationRunHeaderFiller to fill 
# from a Simulation VBF file 
CRH_Algorithm "VARunHeaderFillerDB"

# An overflow datum should overwrite existing datum 
VEventOverflowHandlerDefault_OverwriteVEvent 1

# Discard VArrayEvent if it exists (NOT RECOMMENDED) 
VEventOverflowHandlerDefault_DiscardVArrayEvent 0

# Leave overflow datum in VEventOverflow 
VEventOverflowHandlerDefault_LeaveInOverflow 1

# There are two available methods to download weather data 
# from the database since the format for the weather 
# changed. By default the code will do the right thing and 
# try to get the right data. You can override this (not 
# recommended) by selecing VAWeatherBefore2008 or 
# VAWeatherAfter2008 
W_Algorithm "automatic"
